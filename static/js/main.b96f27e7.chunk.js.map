{"version":3,"sources":["Chat.js","App.js","reportWebVitals.js","index.js"],"names":["Chat","socket","username","room","useState","currentMessage","setCurrentMessage","messageList","setMessageList","sendMessage","messageData","author","message","time","Date","now","getHours","getMinutes","emit","list","useEffect","on","data","className","map","messageContent","id","type","value","placeholder","onChange","event","target","onKeyPress","key","onClick","io","connect","transports","App","setUsername","setRoom","showChat","setShowChat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OA4EeA,MAzEf,YAA2C,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,KAChC,EAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAEMC,EAAW,iDAAG,iGACK,KAAnBJ,EADc,uBAEVK,EAAc,CAClBP,KAAMA,EACNQ,OAAQT,EACRU,QAASP,EACTQ,KACE,IAAIC,KAAKA,KAAKC,OAAOC,WACrB,IACA,IAAIF,KAAKA,KAAKC,OAAOE,cATT,SAYVhB,EAAOiB,KAAK,eAAgBR,GAZlB,OAahBF,GAAe,SAACW,GAAD,4BAAcA,GAAd,CAAoBT,OACnCJ,EAAkB,IAdF,2CAAH,qDAwBjB,OANAc,qBAAU,WACRnB,EAAOoB,GAAG,mBAAmB,SAACC,GAC5Bd,GAAe,SAACW,GAAD,4BAAcA,GAAd,CAAoBG,YAEpC,CAACrB,IAGF,sBAAKsB,UAAU,cAAf,UACE,qBAAKA,UAAU,cAAf,SACE,4CAEF,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,CAAgBA,UAAU,oBAA1B,SACGhB,EAAYiB,KAAI,SAACC,GAChB,OACE,qBACEF,UAAU,UACVG,GAAIxB,IAAauB,EAAed,OAAS,QAAU,MAFrD,SAIE,gCACE,qBAAKY,UAAU,kBAAf,SACE,4BAAIE,EAAeb,YAErB,sBAAKW,UAAU,eAAf,UACE,mBAAGG,GAAG,OAAN,SAAcD,EAAeZ,OAC7B,mBAAGa,GAAG,SAAN,SAAgBD,EAAed,wBAQ7C,sBAAKY,UAAU,cAAf,UACE,uBACEI,KAAK,OACLC,MAAOvB,EACPwB,YAAY,SACZC,SAAU,SAACC,GACTzB,EAAkByB,EAAMC,OAAOJ,QAEjCK,WAAY,SAACF,GACG,UAAdA,EAAMG,KAAmBzB,OAG7B,wBAAQ0B,QAAS1B,EAAjB,2BCjEFR,EAASmC,IAAGC,QAAQ,0CAA2C,CAAEC,WAAa,CAAC,eA0CtEC,MAxCf,WACE,MAAgCnC,mBAAS,IAAzC,mBAAOF,EAAP,KAAiBsC,EAAjB,KACA,EAAwBpC,mBAAS,IAAjC,mBAAOD,EAAP,KAAasC,EAAb,KACA,EAAgCrC,oBAAS,GAAzC,mBAAOsC,EAAP,KAAiBC,EAAjB,KASA,OACE,qBAAKpB,UAAU,MAAf,SACImB,EAoBA,cAAC,EAAD,CAAMzC,OAAQA,EAAQC,SAAUA,EAAUC,KAAMA,IAnBhD,sBAAKoB,UAAU,oBAAf,UACE,6CACA,uBACEI,KAAK,OACLE,YAAY,UACZC,SAAU,SAACC,GACTS,EAAYT,EAAMC,OAAOJ,UAG7B,uBACED,KAAK,OACLE,YAAY,aACZC,SAAU,SAACC,GACTU,EAAQV,EAAMC,OAAOJ,UAGzB,wBAAQO,QA1BC,WACE,KAAbjC,GAA4B,KAATC,IACrBF,EAAOiB,KAAK,YAAaf,GACzBwC,GAAY,KAuBR,+BC1BKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b96f27e7.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\n\nfunction Chat({ socket, username, room }) {\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        room: room,\n        author: username,\n        message: currentMessage,\n        time:\n          new Date(Date.now()).getHours() +\n          \":\" +\n          new Date(Date.now()).getMinutes(),\n      };\n\n      await socket.emit(\"send_message\", messageData);\n      setMessageList((list) => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      setMessageList((list) => [...list, data]);\n    });\n  }, [socket]);\n\n  return (\n    <div className=\"chat-window\">\n      <div className=\"chat-header\">\n        <p>Live Chat</p>\n      </div>\n      <div className=\"chat-body\">\n        <ScrollToBottom className=\"message-container\">\n          {messageList.map((messageContent) => {\n            return (\n              <div\n                className=\"message\"\n                id={username === messageContent.author ? \"other\" : \"you\"}\n              >\n                <div>\n                  <div className=\"message-content\">\n                    <p>{messageContent.message}</p>\n                  </div>\n                  <div className=\"message-meta\">\n                    <p id=\"time\">{messageContent.time}</p>\n                    <p id=\"author\">{messageContent.author}</p>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </ScrollToBottom>\n      </div>\n      <div className=\"chat-footer\">\n        <input\n          type=\"text\"\n          value={currentMessage}\n          placeholder=\"Hey...\"\n          onChange={(event) => {\n            setCurrentMessage(event.target.value);\n          }}\n          onKeyPress={(event) => {\n            event.key === \"Enter\" && sendMessage();\n          }}\n        />\n        <button onClick={sendMessage}>&#9658;</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import \"./App.css\";\nimport io from \"socket.io-client\";\nimport { useState } from \"react\";\nimport Chat from \"./Chat\";\n\nconst socket = io.connect(\"https://chat-socket-back.herokuapp.com/\", { transports : ['websocket'] });\n\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [showChat, setShowChat] = useState(false);\n\n  const joinRoom = () => {\n    if (username !== \"\" && room !== \"\") {\n      socket.emit(\"join_room\", room);\n      setShowChat(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {!showChat ? (\n        <div className=\"joinChatContainer\">\n          <h3>Join A Chat</h3>\n          <input\n            type=\"text\"\n            placeholder=\"John...\"\n            onChange={(event) => {\n              setUsername(event.target.value);\n            }}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Room ID...\"\n            onChange={(event) => {\n              setRoom(event.target.value);\n            }}\n          />\n          <button onClick={joinRoom}>Join A Room</button>\n        </div>\n      ) : (\n        <Chat socket={socket} username={username} room={room} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}